---
import { Icon } from 'astro-icon/components';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';

export interface Skill {
  name: string;
  icon?: string;
  level?: string;
  color?: string;
  description?: string;
}

export interface SkillCategory {
  name: string;
  description?: string;
  icon?: string;
  skills: Skill[];
}

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  categories: SkillCategory[];
  displayType?: 'grid' | 'list' | 'compact';
  id?: string;
  bg?: string;
  classes?: Record<string, string>;
  isDark?: boolean;
}

const {
  title = 'My Skill Set',
  subtitle = 'Technologies and tools I work with.',
  tagline = '',
  categories = [],
  displayType = 'grid',
  id,
  isDark = false,
  bg = await Astro.slots.render('bg'),
  classes = {},
} = Astro.props;

// Default styling for skill levels
const levelStyles = {
  Beginner: {
    badge: 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300',
    progressBar: 'w-1/4 bg-blue-500',
    icon: 'tabler:circle-1',
  },
  Intermediate: {
    badge: 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300',
    progressBar: 'w-2/4 bg-green-500',
    icon: 'tabler:circle-2',
  },
  Advanced: {
    badge: 'bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300',
    progressBar: 'w-3/4 bg-purple-500',
    icon: 'tabler:circle-3',
  },
  Expert: {
    badge: 'bg-primary/10 dark:bg-primary/20 text-primary dark:text-primary-300',
    progressBar: 'w-full bg-primary',
    icon: 'tabler:circle-check',
  },
};
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <!-- Headline -->
  <div class="mb-12 md:mb-16 text-center">
    {
      tagline && (
        <p class="inline-block px-3 py-1 text-xs font-medium tracking-wider text-indigo-700 uppercase bg-indigo-100 dark:bg-indigo-900/30 dark:text-indigo-300 rounded-full mb-4">
          {tagline}
        </p>
      )
    }

    {title && <h2 class="text-3xl md:text-4xl font-bold tracking-tight mb-4">{title}</h2>}

    {subtitle && <p class="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">{subtitle}</p>}
  </div>

  <!-- Skills Content -->
  {
    displayType === 'grid' && (
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {categories.map((category) => (
          <div class="bg-white dark:bg-[#050505] rounded-xl shadow-md p-6 border border-gray-100 dark:border-gray-700 transition-all duration-300 hover:shadow-lg">
            <div class="flex items-center mb-4">
              {category.icon && (
                <div class="p-2 mr-4 rounded-lg bg-primary/10 dark:bg-primary/20 text-primary dark:text-primary-300">
                  <Icon name={category.icon} class="w-6 h-6" />
                </div>
              )}
              <h3 class="text-xl font-bold">{category.name}</h3>
            </div>

            {category.description && (
              <p class="text-gray-600 dark:text-gray-300 mb-5 text-sm">{category.description}</p>
            )}

            <div class="space-y-3">
              {category.skills.map((skill) => (
                <div class="relative">
                  <div class="flex justify-between items-center mb-1">
                    <div class="flex items-center">
                      {skill.icon && <Icon name={skill.icon} class="w-4 h-4 mr-2 text-gray-600 dark:text-gray-400" />}
                      <span class="font-medium">{skill.name}</span>
                    </div>
                    {skill.level && (
                      <span class={`text-xs px-2 py-1 rounded-full ${skill.color || levelStyles[skill.level]?.badge}`}>
                        {skill.level}
                      </span>
                    )}
                  </div>

                  {skill.level && (
                    <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mb-1">
                      <div
                        class={`h-1.5 rounded-full ${skill.color ? skill.color.replace('text-', 'bg-').replace('bg-', 'bg-') : levelStyles[skill.level]?.progressBar}`}
                      />
                    </div>
                  )}

                  {skill.description && (
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">{skill.description}</p>
                  )}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    )
  }

  {
    displayType === 'list' && (
      <div class="space-y-10">
        {categories.map((category) => (
          <div class="bg-white dark:bg-gray-800 rounded-xl shadow-md p-6 border border-gray-100 dark:border-gray-700">
            <div class="flex items-center mb-6">
              {category.icon && (
                <div class="p-3 mr-4 rounded-lg bg-primary/10 dark:bg-primary/20 text-primary dark:text-primary-300">
                  <Icon name={category.icon} class="w-7 h-7" />
                </div>
              )}
              <div>
                <h3 class="text-2xl font-bold">{category.name}</h3>
                {category.description && <p class="text-gray-600 dark:text-gray-300 mt-1">{category.description}</p>}
              </div>
            </div>

            <div class="grid md:grid-cols-2 gap-4">
              {category.skills.map((skill) => (
                <div class="flex items-center p-3 border border-gray-100 dark:border-gray-700 rounded-lg">
                  {skill.level && (
                    <div class="mr-3 text-center">
                      <Icon
                        name={levelStyles[skill.level]?.icon || 'tabler:code'}
                        class={`w-8 h-8 ${
                          skill.color ||
                          levelStyles[skill.level]?.badge
                            .split(' ')
                            .filter((c) => c.includes('text-'))
                            .join(' ')
                        }`}
                      />
                    </div>
                  )}

                  <div class="flex-grow">
                    <div class="flex justify-between items-center">
                      <span class="font-bold">{skill.name}</span>
                      {skill.level && (
                        <span
                          class={`text-xs px-2 py-1 rounded-full ${skill.color || levelStyles[skill.level]?.badge}`}
                        >
                          {skill.level}
                        </span>
                      )}
                    </div>

                    {skill.description && <p class="text-sm text-gray-500 dark:text-gray-400">{skill.description}</p>}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    )
  }

  {
    displayType === 'compact' && (
      <div class="space-y-8">
        {categories.map((category) => (
          <div>
            <h3 class="text-xl font-bold mb-4 flex items-center">
              {category.icon && <Icon name={category.icon} class="w-5 h-5 mr-2 text-primary dark:text-primary-300" />}
              {category.name}
            </h3>

            <div class="flex flex-wrap gap-3">
              {category.skills.map((skill) => (
                <div class="group flex flex-col bg-white dark:bg-gray-800 border border-gray-100 dark:border-gray-700 rounded-lg px-4 py-3 transition-all duration-300 hover:shadow-md hover:-translate-y-1">
                  <div class="flex items-center mb-2">
                    {skill.icon && (
                      <Icon
                        name={skill.icon}
                        class={`w-5 h-5 mr-2 ${
                          skill.level === 'Expert'
                            ? 'text-indigo-600 dark:text-indigo-400'
                            : skill.level === 'Advanced'
                              ? 'text-purple-600 dark:text-purple-400'
                              : skill.level === 'Intermediate'
                                ? 'text-green-600 dark:text-green-400'
                                : skill.level === 'Beginner'
                                  ? 'text-blue-600 dark:text-blue-400'
                                  : 'text-gray-600 dark:text-gray-400'
                        }`}
                      />
                    )}
                    <span class="font-medium flex-1">{skill.name}</span>
                    {skill.level && (
                      <span class="ml-2 text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                        {skill.level}
                      </span>
                    )}
                  </div>

                  {skill.level && (
                    <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-1">
                      <div
                        class={
                          skill.level === 'Expert'
                            ? 'h-1.5 rounded-full w-full bg-indigo-600 dark:bg-indigo-500'
                            : skill.level === 'Advanced'
                              ? 'h-1.5 rounded-full w-3/4 bg-purple-600 dark:bg-purple-500'
                              : skill.level === 'Intermediate'
                                ? 'h-1.5 rounded-full w-2/4 bg-green-600 dark:bg-green-500'
                                : 'h-1.5 rounded-full w-1/4 bg-blue-600 dark:bg-blue-500'
                        }
                      />
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    )
  }
</WidgetWrapper>
