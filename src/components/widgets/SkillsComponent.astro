---
import { Icon } from 'astro-icon/components';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';

export interface Skill {
  name: string;
  icon?: string;
  level?: string;
  color?: string;
  description?: string;
}

export interface SkillCategory {
  name: string;
  description?: string;
  icon?: string;
  skills: Skill[];
}

export interface Props {
  title?: string;
  subtitle?: string;
  tagline?: string;
  categories: SkillCategory[];
  id?: string;
  bg?: string;
  classes?: Record<string, string>;
  isDark?: boolean;
}

const {
  title = 'My Skill Set',
  subtitle = 'Technologies and tools I work with.',
  tagline = '',
  categories = [],
  id,
  isDark = false,
  bg = await Astro.slots.render('bg'),
  classes = {},
} = Astro.props;

// Define level colors and widths with original color scheme
const levelStyles = {
  'Beginner': {
    badge: 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300',
    progressBar: 'w-1/4 bg-blue-500',
    icon: 'tabler:circle-1',
  },
  'Intermediate': {
    badge: 'bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300',
    progressBar: 'w-2/4 bg-green-500',
    icon: 'tabler:circle-2',
  },
  'Advanced': {
    badge: 'bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300',
    progressBar: 'w-3/4 bg-purple-500',
    icon: 'tabler:circle-3',
  },
  'Expert': {
    badge: 'bg-primary/10 dark:bg-primary/20 text-primary dark:text-primary-300',
    progressBar: 'w-full bg-primary',
    icon: 'tabler:circle-check',
  },
};
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto px-4 sm:px-6 ${classes?.container ?? ''}`} bg={bg}>
  <!-- Headline -->
  <div class="mb-10 text-center">
    {
      tagline && (
        <p class="font-mono inline-block px-3 py-1 text-xs tracking-wider text-primary uppercase bg-primary/10 dark:bg-primary/20 rounded-md border border-primary/20 dark:border-primary/30 mb-4">
          &lt;{tagline}/&gt;
        </p>
      )
    }

    {title && <h2 class="font-heading text-3xl md:text-4xl font-bold tracking-tight mb-4">{title}</h2>}
    {subtitle && <p class="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">{subtitle}</p>}
  </div>

  <!-- Compact skills grid with developer theme -->
  <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
    {categories.map((category) => (
      <div class="bg-white dark:bg-gray-950 rounded-lg shadow-md overflow-hidden border border-gray-200 dark:border-gray-700">
        <!-- Category header with code-style comment -->
        <div class="bg-gray-100 dark:bg-gray-950 px-4 py-3 border-b border-gray-200 dark:border-gray-600">
          <div class="flex items-center">
            {category.icon && <Icon name={category.icon} class="w-5 h-5 text-primary mr-2" />}
            <h3 class="font-mono font-bold text-gray-800 dark:text-gray-200">
              /* {category.name} */
            </h3>
          </div>
        </div>
        
        <!-- Skills list -->
        <div class="p-4">
          <div class="grid grid-cols-1 gap-3">
            {category.skills.map((skill) => (
              <div class="skill-item group">
                <div class="flex justify-between items-center mb-1">
                  <div class="flex items-center">
                    {skill.icon && (
                      <Icon 
                        name={skill.icon} 
                        class="w-4 h-4 mr-2 text-gray-600 dark:text-gray-400" 
                      />
                    )}
                    <span class="font-medium text-gray-800 dark:text-gray-200">
                      {skill.name}
                    </span>
                  </div>
                  
                  {skill.level && (
                    <span class={`font-mono text-xs px-2 py-0.5 rounded ${levelStyles[skill.level]?.badge || 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400'}`}>
                      {skill.level}
                    </span>
                  )}
                </div>
                
                {/* Slim progress bar for skill level */}
                {skill.level && (
                  <div class="h-1 w-full bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                    <div class={`h-1 ${levelStyles[skill.level]?.progressBar || 'w-1/4 bg-gray-400'}`}></div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <!-- Code comment for visual interest and developer theme -->
  <div class="mt-8 text-center font-mono text-sm text-gray-500 dark:text-gray-400">
    // Always improving and learning new technologies
  </div>
</WidgetWrapper>