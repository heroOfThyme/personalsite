---
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import type { CallToAction, Widget, Form as FormType } from '~/types';
import Form from '~/components/ui/Form.astro';
import { Icon } from 'astro-icon/components';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: string | CallToAction[];
  form?: FormType;
  highlight?: string;
}

const {
  title = await Astro.slots.render('title') || "Let's build something amazing together",
  subtitle = await Astro.slots.render('subtitle') || "I'm currently available for freelance projects and consulting. If you have a project in mind, let's discuss how I can help bring your vision to reality.",
  tagline = await Astro.slots.render('tagline') || "Available for Work",
  form,
  highlight = "amazing",
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Default form configuration for freelance inquiries
const formConfig = form || {
  inputs: [
    {
      type: 'text',
      name: 'name',
      label: 'Your Name',
      placeholder: 'Enter your name',
      autocomplete: 'name',
    },
    {
      type: 'email',
      name: 'email',
      label: 'Email Address',
      placeholder: 'Enter your email',
      autocomplete: 'email',
    },
    {
      type: 'text',
      name: 'company',
      label: 'Company (Optional)',
      placeholder: 'Your company name',
      autocomplete: 'organization',
    },
  ],
  textarea: {
    name: 'project',
    label: 'Project Details',
    placeholder: 'Tell me about your project, timeline, and budget...',
    rows: 4
  },
  button: 'Send Inquiry',
  description: 'I typically respond within 24-48 hours.',
};
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="relative overflow-hidden rounded-2xl shadow-xl dark:shadow-gray-800/30">
    <!-- Background gradient -->
    <div class="absolute inset-0 bg-gradient-to-br from-indigo-50 via-white to-purple-50 dark:from-indigo-950 dark:via-gray-900 dark:to-purple-950"></div>
    
    <!-- Grid pattern overlay -->
    <div class="absolute inset-0 bg-grid-pattern opacity-10"></div>
    
    <!-- Decorative elements -->
    <div class="absolute -top-24 -right-24 w-96 h-96 rounded-full bg-gradient-to-br from-indigo-200/20 to-purple-200/20 dark:from-indigo-900/20 dark:to-purple-900/20 blur-3xl"></div>
    <div class="absolute -bottom-20 -left-20 w-80 h-80 rounded-full bg-gradient-to-tr from-indigo-200/20 to-purple-200/20 dark:from-indigo-900/20 dark:to-purple-900/20 blur-2xl"></div>
    
    <!-- Content container -->
    <div class="relative p-8 md:p-12 lg:p-16 flex flex-col lg:flex-row gap-8 lg:gap-16">
      <!-- Text content -->
      <div class="lg:w-2/5">
        <div>
          {tagline && (
            <div class="mb-4">
              <span class="inline-block px-3 py-1 text-xs font-medium tracking-wider text-indigo-700 dark:text-indigo-300 uppercase bg-indigo-100 dark:bg-indigo-900/30 rounded-full">
                {tagline}
              </span>
            </div>
          )}
          
          {title && (
            <h2 class="text-3xl md:text-4xl font-bold tracking-tight mb-4 font-heading text-gray-900 dark:text-white">
              {highlight && title.includes(highlight) ? (
                <Fragment set:html={title.replace(highlight, `<span class="text-indigo-600 dark:text-indigo-400">${highlight}</span>`)} />
              ) : (
                title
              )}
            </h2>
          )}
          
          {subtitle && (
            <p class="text-xl text-gray-600 dark:text-gray-300 mb-8">
              {subtitle}
            </p>
          )}
          
          <div class="space-y-4 mb-8">
            <div class="flex items-start">
              <div class="flex-shrink-0 flex h-6 w-6 items-center justify-center rounded-full bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400">
                <Icon name="tabler:check" class="w-4 h-4" />
              </div>
              <div class="ml-3">
                <p class="text-gray-700 dark:text-gray-300">Custom solutions tailored to your specific needs</p>
              </div>
            </div>
            
            <div class="flex items-start">
              <div class="flex-shrink-0 flex h-6 w-6 items-center justify-center rounded-full bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400">
                <Icon name="tabler:check" class="w-4 h-4" />
              </div>
              <div class="ml-3">
                <p class="text-gray-700 dark:text-gray-300">Clear communication and regular updates throughout the project</p>
              </div>
            </div>
            
            <div class="flex items-start">
              <div class="flex-shrink-0 flex h-6 w-6 items-center justify-center rounded-full bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400">
                <Icon name="tabler:check" class="w-4 h-4" />
              </div>
              <div class="ml-3">
                <p class="text-gray-700 dark:text-gray-300">Flexible engagement models to fit your timeline and budget</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Form container -->
      <div class="lg:w-3/5">
        <div class="bg-white dark:bg-[#050505] rounded-xl p-6 md:p-8 shadow-lg border border-gray-100 dark:border-gray-700">
          <h3 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">Get in touch</h3>
          
          <Form
            inputs={formConfig.inputs}
            textarea={formConfig.textarea}
            button={formConfig.button}
            description={formConfig.description}
          />
        </div>
      </div>
    </div>
  </div>
</WidgetWrapper>

<style>
  .bg-grid-pattern {
    background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.05' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='1'/%3E%3C/g%3E%3C/svg%3E");
    background-size: 20px 20px;
  }
  
  :global(.dark) .bg-grid-pattern {
    background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.05' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='1'/%3E%3C/g%3E%3C/svg%3E");
  }
</style>