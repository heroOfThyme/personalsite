---
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import type { CallToAction, Widget, Form as FormType } from '~/types';

import Button from '~/components/ui/Button.astro';
import { Icon } from 'astro-icon/components';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: string | CallToAction[];
  form?: FormType;
  hasForm?: boolean;
  formTitle?: string;
  highlight?: string;
}

const {
  title = await Astro.slots.render('title') || "Let's work together on your next project",
  subtitle = await Astro.slots.render('subtitle') || "Looking for a skilled developer to bring your ideas to life? I'm currently available for freelance projects and consulting.",
  tagline = await Astro.slots.render('tagline') || "Freelance Availability",
  actions = await Astro.slots.render('actions'),
  hasForm = false,
  form,
  formTitle = "Get in touch",
  highlight = "work together",
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// Default form configuration for freelance inquiries
const formConfig = form || {
  inputs: [
    {
      type: 'text',
      name: 'name',
      label: 'Your Name',
      placeholder: 'Enter your name',
      autocomplete: 'name',
    },
    {
      type: 'email',
      name: 'email',
      label: 'Email Address',
      placeholder: 'Enter your email',
      autocomplete: 'email',
    },
    {
      type: 'text',
      name: 'company',
      label: 'Company (Optional)',
      placeholder: 'Your company name',
      autocomplete: 'organization',
    },
  ],
  textarea: {
    name: 'project',
    label: 'Project Details',
    placeholder: 'Tell me about your project and requirements...',
    rows: 4
  },
  button: 'Send Message',
  description: 'I typically respond within 1-2 business days.',
};
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div class="relative overflow-hidden rounded-2xl shadow-xl dark:shadow-gray-800/30">
    <!-- Background gradient -->
    <div class="absolute inset-0 bg-gradient-to-br from-primary/10 via-white to-white dark:from-primary/20 dark:via-gray-900 dark:to-gray-900"></div>
    
    <!-- Optional pattern overlay -->
    <div class="absolute inset-0 bg-grid-pattern opacity-10"></div>
    
    <!-- Content container -->
    <div class={`relative p-8 md:p-12 lg:p-16 flex ${hasForm ? 'flex-col lg:flex-row' : ''} gap-8 lg:gap-16`}>
      <!-- Text content -->
      <div class={`${hasForm ? 'lg:w-1/2' : 'mx-auto text-center max-w-3xl'}`}>
        <div>
          {tagline && (
            <div class="mb-4">
              <span class="inline-block px-3 py-1 text-xs font-medium tracking-wider text-primary uppercase bg-primary/10 rounded-full">
                {tagline}
              </span>
            </div>
          )}
          
          {title && (
            <h2 class="text-3xl md:text-4xl font-bold tracking-tight mb-4 font-heading">
              {highlight && title.includes(highlight) ? (
                <Fragment set:html={title.replace(highlight, `<span class="text-primary dark:text-primary-400">${highlight}</span>`)} />
              ) : (
                title
              )}
            </h2>
          )}
          
          {subtitle && (
            <p class="text-xl text-gray-600 dark:text-gray-300 mb-8">
              {subtitle}
            </p>
          )}
  
          {!hasForm && actions && (
            <div class="flex flex-wrap justify-center gap-4">
              {Array.isArray(actions) ? (
                actions.map((action, index) => (
                  <div class={`flex ${index === 0 ? 'order-0' : 'order-1 sm:order-0'}`}>
                    <Button 
                      {...(action || {})} 
                      variant={action.variant || (index === 0 ? 'primary' : 'secondary')}
                      class={`w-full sm:mb-0 ${index === 0 ? 'shadow-md' : ''}`}
                    />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )}
        </div>
      </div>
      
      <!-- Form container -->
      {hasForm && (
        <div class="lg:w-1/2">
          <div class="bg-white dark:bg-gray-800 rounded-xl p-6 md:p-8 shadow-lg">
            {formTitle && (
              <h3 class="text-2xl font-bold mb-6">{formTitle}</h3>
            )}
            
            <form class="space-y-4">
              {formConfig.inputs && formConfig.inputs.map(({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) => (
                name && (
                  <div class="mb-4">
                    {label && (
                      <label for={name} class="block text-sm font-medium mb-2">
                        {label}
                      </label>
                    )}
                    <input
                      type={type}
                      name={name}
                      id={name}
                      autocomplete={autocomplete}
                      placeholder={placeholder}
                      class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:border-primary focus:ring-2 focus:ring-primary/20 transition duration-200"
                    />
                  </div>
                )
              ))}
              
              {formConfig.textarea && (
                <div class="mb-4">
                  <label for="textarea" class="block text-sm font-medium mb-2">
                    {formConfig.textarea.label}
                  </label>
                  <textarea
                    id="textarea"
                    name={formConfig.textarea.name ? formConfig.textarea.name : 'message'}
                    rows={formConfig.textarea.rows ? formConfig.textarea.rows : 4}
                    placeholder={formConfig.textarea.placeholder}
                    class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:border-primary focus:ring-2 focus:ring-primary/20 transition duration-200"
                  ></textarea>
                </div>
              )}
              
              {formConfig.disclaimer && (
                <div class="flex items-start mt-4">
                  <div class="flex items-center h-5">
                    <input
                      id="disclaimer"
                      name="disclaimer"
                      type="checkbox"
                      class="w-4 h-4 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-primary focus:ring-primary/20"
                    />
                  </div>
                  <div class="ml-3">
                    <label for="disclaimer" class="text-sm text-gray-600 dark:text-gray-400 cursor-pointer">
                      {formConfig.disclaimer.label}
                    </label>
                  </div>
                </div>
              )}
              
              {formConfig.button && (
                <div class="mt-6">
                  <Button variant="primary" type="submit" class="w-full py-3">
                    <Icon name="tabler:send" class="w-5 h-5 mr-2 -ml-1" />
                    {formConfig.button}
                  </Button>
                </div>
              )}
              
              {formConfig.description && (
                <div class="mt-4 text-center">
                  <p class="text-xs text-gray-500 dark:text-gray-400">{formConfig.description}</p>
                </div>
              )}
            </form>
          </div>
        </div>
      )}
    </div>
  </div>
</WidgetWrapper>

<style>
  .bg-grid-pattern {
    background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.05' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='1'/%3E%3C/g%3E%3C/svg%3E");
    background-size: 20px 20px;
  }
  
  :global(.dark) .bg-grid-pattern {
    background-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.05' fill-rule='evenodd'%3E%3Ccircle cx='3' cy='3' r='1'/%3E%3C/g%3E%3C/svg%3E");
  }
</style>